Find doctors with the last name of 'Johnson' in the employee list. The output should contain both their first and last names.

SELECT first_name, last_name FROM employee_list
WHERE last_name = 'Johnson' AND profession = 'Doctor';
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the total cost of each customer's orders. Output customer's id, first name, and the total order cost. Order records by customer's first name alphabetically.

SELECT c.id AS customer_id, c.first_name, SUM(o.total_order_cost) AS total_order_cost
FROM customers c
JOIN orders o ON c.id = o.cust_id
GROUP BY c.id, c.first_name
ORDER BY c.first_name;
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Some of the records are old and contain outdated salary information. Find the current salary of each employee assuming that salaries increase each year. 
Output their id, first name, last name, department ID, and current salary. Order your list by employee ID in ascending order.

SELECT id,first_name,last_name,department_id,max(salary)
FROM ms_employee_salary
GROUP BY
id,first_name,last_name,department_id
ORDER BY id ASC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find all inspections which are part of an inactive program.
select * from los_angeles_restaurant_health_inspections
WHERE program_status = 'INACTIVE';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Order all countries by the year they first participated in the Olympics. Output the National Olympics Committee (NOC) name along with the desired year.
Sort records by the year and the NOC in ascending order.

SELECT noc, min(year) AS first_time_year 
FROM olympics_athletes_events 
GROUP BY noc 
ORDER BY first_time_year, noc;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned). 
Order the results by bikes that were most recently used.

SELECT DISTINCT(bike_number), end_time
FROM dc_bikeshare_q1_2012
ORDER BY end_time DESC;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the gender that has made the most number of doctor appointments. Output the gender along with the corresponding number of appointments.
select count(gender) AS count_gender, gender
from medical_appointments
GROUP BY gender
ORDER BY count_gender DESC;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the total number of records that belong to each variety in the dataset. Output the variety along with the corresponding number of records. Order records by the variety in ascending order.
SELECT count(variety) AS count_variety, variety 
FROM iris
GROUP BY variety
ORDER BY variety, count_variety;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Compare each employee's salary with the average salary of the corresponding department.
Output the department, first name, and salary of employees along with the average salary of that department.

SELECT first_name, department, salary, AVG(salary) over (PARTITION BY department)
FROM employee
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find order details made by Jill and Eva. Consider the Jill and Eva as first names of customers. Output the order date, details and cost along with the first name.
Order records based on the customer id in ascending order.
SELECT customers.first_name,
       order_date,
       order_details,
       total_order_cost
FROM orders
JOIN customers ON customers.id = orders.cust_id
WHERE customers.first_name IN ('Jill',
                               'Eva')
ORDER BY cust_id;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find libraries who haven't provided the email address in circulation year 2016 but their notice preference definition is set to email.
Output the library code.

SELECT DISTINCT(home_library_code)
FROM library_usage
WHERE circulation_active_year = 2016 AND notice_preference_code = 'z' AND provided_email_address = FALSE
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the most profitable company from the financial sector. Output the result along with the continent.
SELECT company, continent
FROM forbes_global_2010_2014
WHERE sector = 'Financials'
  AND profits =
    (SELECT MAX(profits)
     FROM forbes_global_2010_2014
     WHERE sector = 'Financials')
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the base pay for Police Captains. Output the employee name along with the corresponding base pay.
SELECT employeename, basepay
FROM sf_public_salaries
WHERE jobtitle ILIKE '%CAPTAIN%POLICE%';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Return the total number of comments received for each user in the 30 or less days before 2020-02-10. Don't output users who haven't received any comment in the defined time period.
SELECT user_id,
       sum(number_of_comments) AS number_of_comments
FROM fb_comments_count
WHERE created_at BETWEEN '2020-02-10'::date - 30 * INTERVAL '1 day' AND '2020-02-10'::date
GROUP BY user_id
HAVING sum(number_of_comments) > 0
